# задача на python не проходит, из-за проблем со сравнением float, решение верное
# переписано на cpp

def binSearchRight(lf, rg, check, checkparams):  # функция правого бин поиска
    while lf < rg:
        mid = (lf + rg + 1) // 2
        if check(mid, checkparams):
            lf = mid
        else:
            rg = mid - 1
    return lf

def ships_len(len_ship):  # рекурсивная функция расчета клеток, занимаего кораблями, при длине первого len_ship, без пустот
    if len_ship == 0:  # при 0 - 0 клеток
        return 0
    if len_ship == 1:  # при 1 - 1 клетка
        return 1
    total = 0  # общее число клеток
    if len_ship % 2 == 1:  # если разных длин кораблей нечетное число
        mid = len_ship // 2 + 1  # находим середину, сумма длин * количество слева и справа от середины одинакова
        total = (len_ship // 2 + 1) ** 2  # в середине мы обнаруживаем что длина и число одинаковы - берем квадрат
        # считаем общий повтор после середины по формуле суммы 1 до n, умножаем mid раз
        # и умножаем на 2,так как левая и правая части
        total += 2 * (mid * ((mid - 1) * ((mid - 1) + 1) / 2))
        total += 2 * ships_len(mid - 1)  # рекурсивно спускаемся для подсчета клеток кораблей длины mid - 1, умножаем на 2, так как левая и правая части
    else:  # иначе, если разных длин кораблей четное число
        mid = len_ship // 2  # получаем меньшее число из двух в середине
        # квадрата числа тут не будет из-за четности
        total += 2 * ((mid + 1) * (mid * (mid + 1) / 2))  # теперь также считаем по формуле суммы 1 до n общий повтор чисел, но уже mid + 1 раз из-за четности, умножаем на 2
        total += 2 * ships_len(mid - 1)  # рекурсивно спускаемся для подсчета клеток кораблей длины mid - 1, умножаем на 2, так как левая и правая части
    # возвращаем общее число
    return total

def check_target(m, n):  # функция проверки умещения кораблей на поле
    ships_count = m * (m + 1) / 2  # число кораблей, пустот на 1 меньше
    len_of_ships = ships_len(m)  # количество клеток, занимаемое кораблями
    return len_of_ships + ships_count - 1 <= float(n)  # если места хватило - True

# считываем данные
n = int(input().strip())  # число клеток на поле

# ответ
if n == 0:  # если нет клеток - ответ 0
    print(0)
else:  # иначе правый бин поиск по ответу
    print(binSearchRight(1, int(n ** (1. / 2.)), check_target, n))